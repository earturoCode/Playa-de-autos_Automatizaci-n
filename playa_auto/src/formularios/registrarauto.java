
package formularios;

import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import prgs.ModeloTabla;
import prgs.conexion;


public class registrarauto extends javax.swing.JFrame {
    conexion miconexion =new conexion();
    ResultSet rest,recur2;
    int col;
    String[] nom;
    ArrayList<String[]> val = new ArrayList<String[]>();
    String query;
    String des;
    int cod;
    Object[] tfParam;

    public registrarauto() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtmarca = new javax.swing.JTextField();
        txtmodelo = new javax.swing.JTextField();
        txtcolor = new javax.swing.JTextField();
        txtversion = new javax.swing.JTextField();
        txtmotor = new javax.swing.JTextField();
        txtserie = new javax.swing.JTextField();
        txtplaca = new javax.swing.JTextField();
        txtkm = new javax.swing.JTextField();
        txtestado = new javax.swing.JTextField();
        MARCAAUT = new javax.swing.JLabel();
        MODELOAUT = new javax.swing.JLabel();
        COLORAUT = new javax.swing.JLabel();
        VERSIONAUT = new javax.swing.JLabel();
        MOTORAUT = new javax.swing.JLabel();
        SERIEAUT = new javax.swing.JLabel();
        PLACAAUT = new javax.swing.JLabel();
        KMAUT = new javax.swing.JLabel();
        ESTADOAUT = new javax.swing.JLabel();
        botonagg = new javax.swing.JButton();
        botonedit = new javax.swing.JButton();
        botondelete = new javax.swing.JButton();
        botoncancel = new javax.swing.JButton();
        botonsave = new javax.swing.JButton();
        botonexit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_codigo = new javax.swing.JTextField();
        txtmarca1 = new javax.swing.JTextField();
        txtmarca2 = new javax.swing.JTextField();

        txtmarca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmarcaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmarcaKeyReleased(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("REGISTAR AUTO!");

        txtmodelo.setEnabled(false);
        txtmodelo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtmodeloKeyTyped(evt);
            }
        });

        txtcolor.setEnabled(false);
        txtcolor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcolorKeyTyped(evt);
            }
        });

        txtversion.setEnabled(false);
        txtversion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtversionKeyTyped(evt);
            }
        });

        txtmotor.setEnabled(false);
        txtmotor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtmotorKeyTyped(evt);
            }
        });

        txtserie.setEnabled(false);
        txtserie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtserieKeyTyped(evt);
            }
        });

        txtplaca.setEnabled(false);

        txtkm.setEnabled(false);
        txtkm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtkmKeyTyped(evt);
            }
        });

        txtestado.setEnabled(false);
        txtestado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtestadoKeyTyped(evt);
            }
        });

        MARCAAUT.setText("MARCA");

        MODELOAUT.setText("MODELO");

        COLORAUT.setText("COLOR");

        VERSIONAUT.setText("VERSION");

        MOTORAUT.setText("MOTOR");

        SERIEAUT.setText("SERIE");

        PLACAAUT.setText("PLACA");

        KMAUT.setText("KM");

        ESTADOAUT.setText("ESTADO");

        botonagg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/playa_auto/Images/agregar-auto.png"))); // NOI18N
        botonagg.setText("AGREGAR");
        botonagg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonaggActionPerformed(evt);
            }
        });

        botonedit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/playa_auto/Images/editar.png"))); // NOI18N
        botonedit.setText("EDITAR");
        botonedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoneditActionPerformed(evt);
            }
        });

        botondelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/playa_auto/Images/borrar-auto.png"))); // NOI18N
        botondelete.setText("BORRAR");
        botondelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botondeleteActionPerformed(evt);
            }
        });

        botoncancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/playa_auto/Images/cancelar-auto.png"))); // NOI18N
        botoncancel.setText("CANCELAR");
        botoncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoncancelActionPerformed(evt);
            }
        });

        botonsave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/playa_auto/Images/grabar-auto.png"))); // NOI18N
        botonsave.setText("GRABAR");
        botonsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonsaveActionPerformed(evt);
            }
        });

        botonexit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/playa_auto/Images/cerrar-sesion.png"))); // NOI18N
        botonexit.setText("SALIR");
        botonexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonexitActionPerformed(evt);
            }
        });

        jLabel2.setText("CODIGO");

        txt_codigo.setEnabled(false);
        txt_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_codigoActionPerformed(evt);
            }
        });
        txt_codigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_codigoKeyTyped(evt);
            }
        });

        txtmarca1.setEnabled(false);
        txtmarca1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmarca1ActionPerformed(evt);
            }
        });
        txtmarca1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmarca1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtmarca1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtmarca1KeyTyped(evt);
            }
        });

        txtmarca2.setEnabled(false);
        txtmarca2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtmarca2KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtmarca2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(MARCAAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MODELOAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(VERSIONAUT, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                        .addComponent(MOTORAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SERIEAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PLACAAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(KMAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ESTADOAUT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(COLORAUT, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtmodelo)
                            .addComponent(txtcolor)
                            .addComponent(txtversion)
                            .addComponent(txtmotor)
                            .addComponent(txtserie)
                            .addComponent(txtplaca)
                            .addComponent(txtkm)
                            .addComponent(txtestado, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtmarca1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtmarca2)))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botonagg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonedit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonsave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botondelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botoncancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonexit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(txt_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MARCAAUT, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtmarca1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtmarca2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtmodelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(MODELOAUT, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtcolor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(COLORAUT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtversion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(VERSIONAUT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtmotor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MOTORAUT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtserie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SERIEAUT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtplaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PLACAAUT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtkm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KMAUT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtestado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ESTADOAUT)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonagg, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonedit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonsave, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botondelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botoncancel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonexit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botonagg, botoncancel, botondelete, botonedit, botonexit, botonsave});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botondeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botondeleteActionPerformed
        operacion = "borrar"; 
        des_botones();
        this.txt_codigo.setEnabled(true);
        this.txt_codigo.requestFocus();
    }//GEN-LAST:event_botondeleteActionPerformed

    private void botonexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonexitActionPerformed
        
        int respuesta = JOptionPane.showConfirmDialog(this, "DESEA SALIR", "CONFIRMAR", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            dispose();
        }
    
    }//GEN-LAST:event_botonexitActionPerformed

    private void botonaggActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonaggActionPerformed
        hab_text();
        des_botones();
        this.txtmarca1.requestFocus();
        generar_codigo();
        operacion = "agregar";
    }//GEN-LAST:event_botonaggActionPerformed

    private void botoncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoncancelActionPerformed
        hab_botones();
        des_text();
        clear_text();
    }//GEN-LAST:event_botoncancelActionPerformed

    private void botonsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonsaveActionPerformed
        grabar_datos();
        hab_botones();
        des_text();
        clear_text();
    }//GEN-LAST:event_botonsaveActionPerformed

    private void txt_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_codigoActionPerformed
        buscar_codigo();
    }//GEN-LAST:event_txt_codigoActionPerformed

    private void botoneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoneditActionPerformed
        operacion = "editar"; 
        this.txt_codigo.setEnabled(true);
        this.txt_codigo.requestFocus();
        des_botones();
    }//GEN-LAST:event_botoneditActionPerformed

    private void txtmarcaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarcaKeyPressed
        //   Buscado();
        if(evt.getKeyCode()==27){
            this.dispose();
        }
    }//GEN-LAST:event_txtmarcaKeyPressed

    private void txtmarcaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarcaKeyReleased

    }//GEN-LAST:event_txtmarcaKeyReleased

    private void txtmarca1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarca1KeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_F2) {
        // Aquí configuramos los parámetros necesarios para el Buscador
        tfParam = new Object[2];
        tfParam[0] = this.txtmarca1;
        tfParam[1] = this.txtmarca2;
        
        // Consulta SQL para buscar las marcas
        String sql = "SELECT mar_id as Codigo, mar_nom as Marca FROM marcas WHERE mar_nom LIKE ?";
        
        // Columnas a mostrar en el buscador
        String[] columnas = {"Codigo", "Marca"};
        
        // Número de columnas
        int col = 2;
        
        // Creamos una instancia del Buscador y lo mostramos
        Buscador pp = new Buscador(sql, columnas, col, tfParam);
        pp.setTitle("Buscar Marca");
        pp.setVisible(true);
    }
    }//GEN-LAST:event_txtmarca1KeyPressed


    private void txtmarca1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarca1KeyReleased

    }//GEN-LAST:event_txtmarca1KeyReleased


    private void txtmarca1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarca1KeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < '0') ||
                (caracter > '9')) &&
                (caracter != evt.VK_BACK_SPACE))            
        {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo se permiten números", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_txtmarca1KeyTyped

    private void txtmarca1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmarca1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmarca1ActionPerformed

    private void txtmarca2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarca2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtmarca2KeyTyped

    private void txtmarca2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmarca2KeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_PLUS) {
        tfParam = new Object[2];
        tfParam[0] = this.txtmarca1;
        tfParam[1] = this.txtmarca2;
        String sql = "SELECT mar_id as Codigo, mar_nom as Marca FROM marcas WHERE mar_nom LIKE ?";
        Buscador pp = new Buscador(sql, new String[] {"Codigo", "Marca"}, 2, tfParam);
        pp.setTitle("Buscar Marca");
        pp.setVisible(true);
    }
    }//GEN-LAST:event_txtmarca2KeyPressed

    private void txt_codigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_codigoKeyTyped

    }//GEN-LAST:event_txt_codigoKeyTyped

    private void txtmodeloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmodeloKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && c != ' ' && c != evt.VK_BACK_SPACE) {
            evt.consume(); // Ignorar el carácter
            JOptionPane.showMessageDialog(null, "Solo se permiten letras en el modelo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtmodeloKeyTyped

    private void txtcolorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcolorKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && c != ' ' && c != evt.VK_BACK_SPACE) {
            evt.consume(); // Ignorar el carácter
            JOptionPane.showMessageDialog(null, "Solo se permiten letras en el color", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtcolorKeyTyped

    private void txtversionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtversionKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < '0') ||
                (caracter > '9')) &&
                (caracter != evt.VK_BACK_SPACE))            
        {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo se permiten números", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_txtversionKeyTyped

    private void txtmotorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtmotorKeyTyped

    }//GEN-LAST:event_txtmotorKeyTyped

    private void txtserieKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtserieKeyTyped

    }//GEN-LAST:event_txtserieKeyTyped

    private void txtkmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtkmKeyTyped
        char caracter = evt.getKeyChar();
        if(((caracter < '0') ||
                (caracter > '9')) &&
                (caracter != evt.VK_BACK_SPACE))            
        {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Solo se permiten números", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_txtkmKeyTyped

    private void txtestadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtestadoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isLetter(c) && c != ' ' && c != evt.VK_BACK_SPACE) {
            evt.consume(); // Ignorar el carácter
            JOptionPane.showMessageDialog(null, "Solo se permiten letras en el estado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtestadoKeyTyped

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registrarauto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registrarauto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registrarauto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registrarauto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registrarauto().setVisible(true);
            }
        });
    }
    private String operacion= "";
    private void hab_text() {
          txtmarca.setEnabled(true);
          txtmodelo.setEnabled(true);
          txtcolor.setEnabled(true);
          txtversion.setEnabled(true);
          txtmotor.setEnabled(true);
          txtserie.setEnabled(true);
          txtplaca.setEnabled(true);
          txtkm.setEnabled(true);
          txtestado.setEnabled(true);
          txtmarca1.setEnabled(true);
          txtmarca2.setEnabled(true);
      }
      
      private void des_text() {
          txtmarca.setEnabled(false);
          txtmodelo.setEnabled(false);
          txtcolor.setEnabled(false);
          txtversion.setEnabled(false);
          txtmotor.setEnabled(false);
          txtserie.setEnabled(false);
          txtplaca.setEnabled(false);
          txtkm.setEnabled(false);
          txtestado.setEnabled(false);
          txt_codigo.setEnabled(false);
          txtmarca1.setEnabled(false);
          txtmarca2.setEnabled(false);
      }
  
      private void clear_text() {
          txtmarca.setText("");
          txtmodelo.setText("");
          txtcolor.setText("");
          txtversion.setText("");
          txtmotor.setText("");
          txtserie.setText("");
          txtplaca.setText("");
          txtkm.setText("");
          txtestado.setText("");
          txt_codigo.setText("");
          txtmarca1.setText("");
          txtmarca2.setText("");
      }
    private void des_botones() {
          botonagg.setEnabled(false);
          botondelete.setEnabled(false);
          botonedit.setEnabled(false);
          botonexit.setEnabled(false);
  
          botonsave.setEnabled(true);
          botoncancel.setEnabled(true);
      }
  
    private void hab_botones() {
          botonagg.setEnabled(true);
          botondelete.setEnabled(true);
          botonedit.setEnabled(true);
          botonexit.setEnabled(true);
  
          botonsave.setEnabled(false);
          botoncancel.setEnabled(false);
      }
    
    private void generar_codigo(){
        try 
        {
             // habilita la variable para recibir sentencias  
            miconexion.sentencia = miconexion.conexion.createStatement();
                 
            miconexion.resultado = miconexion.sentencia.executeQuery("SELECT IFNULL(MAX(aut_id),0) + 1  AS nuevocod FROM autos");
            
            //etraer los datos de la variable
            while(miconexion.resultado.next()==true)
            {
                this.txt_codigo.setText(miconexion.resultado.getString("nuevocod"));
                
                // this.txt_codigo.setText("7777");
            }  
        } // generar cod
        catch (SQLException ex) {
            Logger.getLogger(registrarven.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
 private void grabar_datos() {
    String insertSQL = "INSERT INTO autos(aut_id, mar_id, aut_modelo, aut_color, aut_versio, aut_motor, aut_serie, aut_placa, aut_km, aut_estado) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    String updateSQL = "UPDATE autos SET mar_id = ?, aut_modelo = ?, aut_color = ?, aut_versio = ?, aut_motor = ?, aut_serie = ?, aut_placa = ?, aut_km = ?, aut_estado = ? WHERE aut_id = ?";
    
    try {
        PreparedStatement pstmt;
        
        if (operacion.equals("agregar")) {
            pstmt = miconexion.conexion.prepareStatement(insertSQL);
            pstmt.setInt(1, Integer.parseInt(this.txt_codigo.getText()));
            pstmt.setInt(2, Integer.parseInt(this.txtmarca1.getText()));
            pstmt.setString(3, this.txtmodelo.getText());
            pstmt.setString(4, this.txtcolor.getText());
            pstmt.setInt(5, Integer.parseInt(this.txtversion.getText()));
            pstmt.setString(6, this.txtmotor.getText());
            pstmt.setString(7, this.txtserie.getText());
            pstmt.setString(8, this.txtplaca.getText());
            pstmt.setInt(9, Integer.parseInt(this.txtkm.getText()));
            pstmt.setString(10, this.txtestado.getText());
            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "El registro se ha insertado satisfactoriamente.", "CONFIRMACION", JOptionPane.INFORMATION_MESSAGE);
        } else if (operacion.equals("editar")) {
            // Debugging: Print values before updating
            System.out.println("mar_id: " + this.txtmarca1.getText());
            System.out.println("aut_modelo: " + this.txtmodelo.getText());
            System.out.println("aut_color: " + this.txtcolor.getText());
            System.out.println("aut_versio: " + this.txtversion.getText());
            System.out.println("aut_motor: " + this.txtmotor.getText());
            System.out.println("aut_serie: " + this.txtserie.getText());
            System.out.println("aut_placa: " + this.txtplaca.getText());
            System.out.println("aut_km: " + this.txtkm.getText());
            System.out.println("aut_estado: " + this.txtestado.getText());
            System.out.println("aut_id: " + this.txt_codigo.getText());

            pstmt = miconexion.conexion.prepareStatement(updateSQL);
            pstmt.setInt(1, Integer.parseInt(this.txtmarca1.getText()));
            pstmt.setString(2, this.txtmodelo.getText());
            pstmt.setString(3, this.txtcolor.getText());
            pstmt.setInt(4, Integer.parseInt(this.txtversion.getText()));
            pstmt.setString(5, this.txtmotor.getText());
            pstmt.setString(6, this.txtserie.getText());
            pstmt.setString(7, this.txtplaca.getText());
            pstmt.setInt(8, Integer.parseInt(this.txtkm.getText()));
            pstmt.setString(9, this.txtestado.getText());
            pstmt.setInt(10, Integer.parseInt(this.txt_codigo.getText()));
            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "El registro se ha modificado satisfactoriamente.", "CONFIRMACION", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException ex) {
        Logger.getLogger(registrarauto.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private void buscar_codigo() {
    try {
        boolean encontro = false;
        String codigoAuto = this.txt_codigo.getText();
        ResultSet rsAuto = buscarAutoPorCodigo(codigoAuto);
        
        if (rsAuto.next()) {
            mostrarDatosAuto(rsAuto);
            encontro = true;

            if (operacion.equals("editar")) {
                this.txtmarca1.requestFocus();
                hab_text();
            } else if (operacion.equals("borrar")) {
                confirmarBorrado();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No existe auto con este código!", "Atención", JOptionPane.ERROR_MESSAGE);
            this.txt_codigo.setText("");
            this.txt_codigo.requestFocus();
        }
    } catch (SQLException ex) {
        Logger.getLogger(registrarcli.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private ResultSet buscarAutoPorCodigo(String codigoAuto) throws SQLException {
    String query = "SELECT * FROM autos WHERE aut_id = ?";
    PreparedStatement pstmt = miconexion.conexion.prepareStatement(query);
    pstmt.setString(1, codigoAuto);
    return pstmt.executeQuery();
}

private void mostrarDatosAuto(ResultSet rsAuto) throws SQLException {
    int marId = rsAuto.getInt("mar_id");
    this.txtmarca1.setText(String.valueOf(marId));
    this.txtmodelo.setText(rsAuto.getString("aut_modelo"));
    this.txtcolor.setText(rsAuto.getString("aut_color"));
    this.txtversion.setText(rsAuto.getString("aut_versio"));
    this.txtmotor.setText(rsAuto.getString("aut_motor"));
    this.txtserie.setText(rsAuto.getString("aut_serie"));
    this.txtplaca.setText(rsAuto.getString("aut_placa"));
    this.txtkm.setText(rsAuto.getString("aut_km"));
    this.txtestado.setText(rsAuto.getString("aut_estado"));

    // Obtener el nombre de la marca
    String nombreMarca = obtenerNombreMarca(marId);
    this.txtmarca2.setText(nombreMarca);
}

private String obtenerNombreMarca(int marId) throws SQLException {
    String query = "SELECT mar_nom FROM marcas WHERE mar_id = ?";
    PreparedStatement pstmt = miconexion.conexion.prepareStatement(query);
    pstmt.setInt(1, marId);
    ResultSet rsMarca = pstmt.executeQuery();
    return rsMarca.next() ? rsMarca.getString("mar_nom") : "";
}

private void confirmarBorrado() {
    int respuesta = JOptionPane.showConfirmDialog(this, "¿Deseas Borrar el Registro?", "Confirmar", JOptionPane.YES_NO_OPTION);
    if (respuesta == JOptionPane.YES_OPTION) { // si
        try {
                         miconexion.sentencia = miconexion.conexion.createStatement();
                          miconexion.sentencia.executeUpdate("DELETE FROM autos WHERE aut_id ="+this.txt_codigo.getText());

                          JOptionPane.showMessageDialog(null, "El registro se ha borrado satisfactoriamente.", "Playa_auto", JOptionPane.INFORMATION_MESSAGE);

                          des_text();
                          hab_botones();
                          clear_text();
        } catch (SQLException ex) {
            Logger.getLogger(registrarcli.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else { // no 
        JOptionPane.showMessageDialog(null, "La operación ha sido cancelada", "Confirmación", JOptionPane.INFORMATION_MESSAGE);
        des_text();
        hab_botones();
        clear_text();
    }
}


    
 private void ConfigurarGrilla() {
     //   grilla.getColumnModel().getColumn(0).setPreferredWidth(5);
     //   grilla.getColumnModel().getColumn(1).setPreferredWidth(250);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel COLORAUT;
    private javax.swing.JLabel ESTADOAUT;
    private javax.swing.JLabel KMAUT;
    private javax.swing.JLabel MARCAAUT;
    private javax.swing.JLabel MODELOAUT;
    private javax.swing.JLabel MOTORAUT;
    private javax.swing.JLabel PLACAAUT;
    private javax.swing.JLabel SERIEAUT;
    private javax.swing.JLabel VERSIONAUT;
    private javax.swing.JButton botonagg;
    private javax.swing.JButton botoncancel;
    private javax.swing.JButton botondelete;
    private javax.swing.JButton botonedit;
    private javax.swing.JButton botonexit;
    private javax.swing.JButton botonsave;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txt_codigo;
    private javax.swing.JTextField txtcolor;
    private javax.swing.JTextField txtestado;
    private javax.swing.JTextField txtkm;
    private javax.swing.JTextField txtmarca;
    private javax.swing.JTextField txtmarca1;
    private javax.swing.JTextField txtmarca2;
    private javax.swing.JTextField txtmodelo;
    private javax.swing.JTextField txtmotor;
    private javax.swing.JTextField txtplaca;
    private javax.swing.JTextField txtserie;
    private javax.swing.JTextField txtversion;
    // End of variables declaration//GEN-END:variables
}
